
require:
   node-uuid as uuid
   .utilities ->
      is-channel
      mom

provide:
   message-transformers
   message-mergers

class Action:
   constructor(entry) =
      @action = entry



method make-traffic(nickname, entry, m) =
   orig-name = m.from or nickname
   data = match (@users[m.channel] or {=})[nickname]:
      false? ->
         {modes = new Set()
          present = false
          nickname = orig-name}
      d ->
         {modes = new Set(consume(d.modes))
          present = true
          nickname = orig-name}
   {
      type = .traffic
      changes = {
         nickname => {entry}
      }
      initial = {
         nickname => data
      }
   }


message-transformers = Object.assign(Object.create(null)) with {

   method add-mode(m) =
      if R"[vhoaq]"? m.mode:
         make-traffic.call(@, m.argument, #add-mode{m.mode}, m)
      else:
         true

   method remove-mode(m) =
      if R"[vhoaq]"? m.mode:
         make-traffic.call(@, m.argument, #remove-mode{m.mode}, m)
      else:
         true

   method join(m) =
      make-traffic.call(@, m.agent, #join{}, m)

   method part(m) =
      make-traffic.call(@, m.agent, #part{}, m)

   method quit(m) =
      if @users[m.agent]:
         make-traffic.call(@, m.agent, #quit{}, m)
      else:
         .reject

   method kick(m) =
      make-traffic.call(@, m.kicked, #kick{}, m)

   method nick(m) =
      if m.from and @users[m.from]:
         make-traffic.call(@, m.to, #nick{m.from, m.to}, m)
      else:
         .reject

   method _other(m) =
      m

}



message-mergers = Object.assign(Object.create(null)) with {

   method traffic(m1, m2) =
      key-switches = {=}
      items(m2.changes) each
         {k, {#nick{from, to}, *}} ->
            key-switches[from] = to
         else ->
            continue
      changes = object with items(m1.changes) each {k, v} ->
         {key-switches[k] or k, v}
      items(m2.changes) each {k, v} ->
         changes[k] or= {}
         changes[k] ++= v

      initial = object with items(m1.initial) each {k, v} ->
         {key-switches[k] or k, v}

      {
         type = .traffic
         channel = m1.channel
         changes = changes
         initial = m2.initial & initial
      }

   method message(m1, m2) =
      if m1.agent !== m2.agent
         \ or m1.format !== m2.format:
         return null
      if Math.abs(mom(m1.time).diff(mom(m2.time))) < 5000:
         {
            type = .message
            channel = m1.channel
            agent = m1.agent
            content = m1.content + "\n" + m2.content
            format = m1.format
            time = m2.time
         }

   method _other(m1, m2) =
      null
}
