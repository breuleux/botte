
require:
   react -> create-element
   react-dom as ReactDOM
   react-youtube-player as YoutubePlayer
   react-addons-pure-render-mixin as PureRender
   request-promise as rq
   open-graph as og
   ..format -> output-formatters
   escape-html
   lodash
   hyper-replace

require-macros:
   earl-react ->
      %, component

globals:
   MutationObserver

provide:
   expand-links


ExpanderComponent = {
   method get-initial-state() = {
      hide-link = @props.hide-link
      open = @props.open
      has-icon = if{@props.has-icon === undefined, true, @props.has-icon}
   }
      
   method render() =
      image = if{@state.open, @opened-icon or "base/cross", @closed-icon}
      span %
         on-click(e) =
            ;; This is to avoid selecting the message when the link or
            ;; the expander icon or the expanded content are clicked
            e.stop-propagation()
         if not @state.hide-link: {
            a %
               href = @props.href
               @props.href
            if @state.has-icon:
               span.expand-image %
                  img.expander-icon %
                     src = '../assets/entypo/{image}.svg'
                  on-click() =
                     @set-state with {open = not @state.open}
         }
         if @state.open:
            @render-opened()
}


component InteractiveImage:
   get-initial-state() =
      @_mouse-move-handler = lodash.debounce(@mouse-move-handler, 10, {max-wait = 100})
      {
         resizing = false
         orig = {=}
         height = 0
         width = 0
      }

   mouse-move-handler(e) =
      if @state.resizing:
         rect = e.target.get-bounding-client-rect()
         o = @state.orig
         x = e.client-x - rect.left
         y = e.client-y - rect.top
         scale = Math.max(y / o.y, x / o.x)
         @set-state with {
            height = o.h * scale
            width = o.w * scale
         }

   render() =
      div %
         style = {
            display = .block
            min-height = @state.orig.h or .auto
            height = @state.height or .auto
            width = @state.width or .auto
         }
         img %
            ;; ref(elem) =
            ;;    @_elem = elem
            on-load(e) =
               @props.view??.emit(.scroll-change)
               {height => h, width => w} = e.target
               scale = Math.min(1, 500/h, 800/w)
               @set-state with {
                  height = h * scale
                  width = w * scale
               }
            on-mouse-down(e) =
               rect = e.target.get-bounding-client-rect()
               @set-state with {
                  resizing = true
                  orig = {
                     x = e.client-x - rect.left
                     y = e.client-y - rect.top
                     h = @state.height
                     w = @state.width
                  }
               }
            on-mouse-up(e) =
               @set-state with {resizing = false, orig = {=}}
            on-mouse-out(e) =
               @set-state with {resizing = false, orig = {=}}
            on-mouse-move = @mouse-move-handler
            draggable = false
            style = {
               display = .block
               height = @state.height or .auto
               width = @state.width or .auto
               ;; max-height = 500
               ;; max-width = 800
            }
            src = @props.src

component ImageExpander:
   mixins = {ExpanderComponent, PureRender}
   closed-icon = "base/camera"
   render-opened() =
      InteractiveImage %
         view = @props.view
         src = @props.href

component YoutubeExpander:
   mixins = {ExpanderComponent, PureRender}
   closed-icon = "base/controller-play"
   render-opened() =
      YoutubePlayer %
         videoId = @props.id
         width = 560
         height = 315
         playbackState = .playing
         configuration = {showinfo = 0, controls = 1}

component TwitterExpander:
   mixins = {ExpanderComponent, PureRender}
   closed-icon = "social/twitter"
   get-initial-state() = {
      html = "Awaiting response ..."
   }
   async component-will-mount() =
      result = await rq with
         uri = 'https://publish.twitter.com/oembed?url={encodeURIComponent(@props.href)}&maxwidth=550&omit_script=true'
         json = true
      print result
      @set-state with {
         html = result.html
      }
   async component-did-mount() =
      globals: twttr, MutationObserver
      node = ReactDOM.findDOMNode(@)
      m = new MutationObserver with m ->
         @props.view??.emit(.scroll-change)
      m.observe(node, {subtree = true, attributes = true})
      twttr.widgets.load(node)
   async component-did-update() =
      globals: twttr
      twttr.widgets.load(ReactDOM.findDOMNode(@))
   render-opened() =
      ;; React.create-element(.div, {dangerouslySetInnerHTML = {__html = @state.html}})
      ;; .filler %
      div %
         dangerouslySetInnerHTML = {__html = @state.html}


component PastebinExpander:
   mixins = {ExpanderComponent, PureRender}
   closed-icon = "base/text-document-inverted"
   render-opened() =
      iframe %
         src = 'http://pastebin.com/embed_iframe/{@props.id}'
         style = {width = "100%", height = "1em", border = "1px solid #888"}
         on-load(e) =
            frame-height = e.target.content-window.document.body.scroll-height
            new-height = if{frame-height > 300, 300, frame-height}
            e.target.style.height = '{new-height}px'

component OpenGraphExpander:
   mixins = {ExpanderComponent, PureRender}
   closed-icon = "base/globe"
   get-initial-state() =
      {
         graph = null
      }
   component-will-mount() =
      og(@props.href) with {err, graph} ->
         if err or not graph.title:
            print 'Failed to get info for: {@props.href}'
            @set-state with {has-icon = false}
         else:
            @set-state with {graph = graph, has-icon = true}
   render-opened() =
      g = @state.graph
      if g:
         a.website-card %
            href = @props.href
            if g.image:
               img.website-media %
                  src = g.image.url
            .website-content %
               .website-title %
                  g.title or @props.href
               .website-description %
                  (g.description or "").trim()
            .website-name %
               g.site_name


method expand-links(text) =
   ;; TODO: optimize?

   r = hyper-replace(text) with {
      pattern = R"https?://[^ \n\t\[\]{}()\xa0]+"
      replacement(url) =
         var rval = "???"
         expanders each e ->
            match url:
               e.regexp! args ->
                  rval = e.create.apply(@, {url} ++ args[1..])
                  break
               else ->
                  pass
         rval         
   }
   r each
      String? s ->
         output-formatters.irc(s, create-element)
      other ->
         other

   ;; splits = text.split(R"(https?://[^ \n\t\[\]{}()\xa0]+)")
   ;; enumerate(splits) each {match i, split} ->
   ;;    when i mod 2 == 1 ->
   ;;       var rval = "???"
   ;;       expanders each e ->
   ;;          match split:
   ;;             e.regexp! args ->
   ;;                rval = e.create.apply(@, {split} ++ args[1..])
   ;;                break
   ;;             else ->
   ;;                pass
   ;;       rval
   ;;    else ->
   ;;       output-formatters.irc(split, create-element)


expanders = {

   {
      regexp = R.i"\.(jpg|jpeg|png|gif|bmp)"
      method create(url) =
         print @props
         ImageExpander %
            view = @props.view
            href = url
            open = false
   }

   {
      regexp = R"https?://(www\.)?twitter.com/.*"
      method create(url) =
         TwitterExpander %
            view = @props.view
            href = url
            open = false
   }

   {
      regexp = R"https?://(?:www\.)?youtube.com/(?:watch|embed)\?v=(.*)"
      method create(url, id) =
         YoutubeExpander %
            href = url
            id = id
            open = false
   }

   {
      regexp = R"https?://(?:www\.)?pastebin.com/(.*)"
      method create(url, id) =
         PastebinExpander %
            href = url
            id = id
            open = true
   }

   {
      regexp = R"https?://[^ \n\t\[\]{}()\xa0]+"
      method create(url) =
         a %
            on-click(e) =
               e.stop-propagation()
            href = url
            url
   }
}
