
require:
   .mixins ->
      ViewEvents
      ChannelEvents
      MasterEvents
      DebouncedTasks
   ..utilities ->
      SortedArray
      compute-level
      string-to-color

require-macros:
   earl-react ->
      %, component

provide:
   User
   ViewUsers
   ChannelUsers


component User:
   render() =
      l = compute-level(@props.data.modes)
      span.user-name %
         class-name = 'user-level-{l}'
         @props.data.nickname


UserArray(users) =
   s = SortedArray with {u1, u2} ->
      ;; ldiff = compute-level(u1.modes) - compute-level(u2.modes)
      n1 = u1.nickname.to-lower-case()
      n2 = u2.nickname.to-lower-case()
      if n1 < n2:
         -1
      elif n1 > n2:
         1
      else:
         0
   s.populate(users)


component ViewUsers:
   mixins = {ViewEvents, DebouncedTasks}

   get-initial-state() = {
      channels = consume(@props.view.channels)
   }

   view-events() = {
      add-channel(channel) =
         @set-state with {channels = @state.channels ++ {channel}}
      remove-channel(channel) =
         @set-state with {channels = @state.channels each c when c !== channel -> c}
   }

   render() =
      .users %
         @state.channels each ch ->
            ChannelUsers %
               master = @props.master
               view = @props.view
               channel = ch


component ChannelUsers:
   mixins = {ViewEvents, ChannelEvents, DebouncedTasks}

   get-initial-state() = {
      focus = @props.view.focus
      users = UserArray with items(@props.channel.users) each {k, v} -> v
   }

   execute-tasks(tasks) =
      var changes = false
      var users = @state.users
      tasks each
         #add-all{us} ->
            changes = true
            users = users.add-all(us)
         #delete-all{us} ->
            changes = true
            users = users.delete-all(us)
      if changes:
         @set-state({= users})

   view-events() = {
      set-focus(_, focus) =
         @set-state with {focus = focus}
   }

   channel-events() = {
      add-users(us) =
         @do-task(#add-all{us})
      delete-users(us) =
         @do-task(#delete-all{us})
   }

   render() =
      div %
         class-name = if{@state.focus === @props.channel, .visible, .invisible}
         .channel-users-header %
            .network-label %
               style = {background = string-to-color(@props.channel.network, 100, 50)}
               @props.channel.network
            if @props.channel.short-name:
               .channel-label %
                  style = {color = string-to-color(@props.channel.short-name, 100, 50)}
                  @props.channel.short-name
         .channel-users %
            @state.users each data ->
               l = compute-level(data.modes)
               span.user-name %
                  class-name = 'user-level-{l}'
                  data.nickname

