
require:
   lodash
   .mixins ->
      MasterEvents
   ..utilities ->
      shorten
   ..kb ->
      Interactor

require-macros:
   earl-react ->
      %, component

provide:
   Input


component Input:
   mixins = {MasterEvents}
   get-initial-state() = {
      last-active = {=}
      tab-cycle = null
      cycle-index = 0
      text = ""
      nickname = @props.master.active-nickname()
   }

   clear-cycle() =
      @set-state with {tab-cycle = null, cycle-index = 0}

   compute-cycle(cursor-position) =
      to-cycle = @props.master.channels each ch when not ch.starts-with("/") -> ch
      chs = lodash.sort-by(to-cycle) with
         ch ->
            if @props.master.active-channel === ch:
               "9999"
            else:
               @state.last-active[ch] or "0000"
      chs.reverse() each ch -> f where f() =
         @props.master.set-active-channel(ch)

   cycle(direction = 1) =
      var idx = @state.cycle-index
      var cyc = @state.tab-cycle
      if not cyc:
         cyc = @compute-cycle("")
      next-idx = (idx + direction + cyc.length) mod cyc.length
      cyc[next-idx]()
      if next-idx === 0:
         @clear-cycle()
      else:
         @set-state with {tab-cycle = cyc, cycle-index = next-idx}

   cycle-group(match direction = 1) =
      do:
         _views = @props.master.master.views
         views = neighbours(_views ++ _views[0...1])
         @props.master.master.views
      > 0 ->
         views each
            {x, y} when x === @props.master ->
               @props.master.master.activate(y)
               return
      < 0 ->
         views each
            {x, y} when y === @props.master ->
               @props.master.master.activate(x)
               return

   events() = {
      set-active-channel(channel) =
         @set-state with {
            nickname = @props.master.active-nickname()
         }
      set-nickname(channel, name) =
         @set-state with {
            nickname = @props.master.active-nickname()
         }
      add-message(m) =
         if m.type === .message:
            @set-state with {
               last-active = @state.last-active & {m.channel => m.time}
            }
   }

   render() =
      interactor = Interactor({=})
      interactor.set-bindings with {
         "Tab"() =
            @cycle(1)
         "S-Tab"() =
            @cycle(-1)
         "C-Tab"() =
            @cycle-group(1)
         "C-S-Tab"() =
            @cycle-group(-1)
         "Up"() =
            print "up"
         "Down"() =
            print "down"
         "S-Up"() =
            print "Sup"
         "S-Down"() =
            print "Sdown"
      }

      .interact %
         span.own-nickname %
            @state.nickname
         form %
            on-submit(e) =
               e.prevent-default()
               match @state.text:
                  R"^/([^ ]+) ?(.*)"! {_, cmd, arg} ->
                     @props.master.send with {
                        command = cmd
                        argument = arg
                     }
                  text ->
                     @props.master.send with {
                        command = .say
                        argument = text
                     }
               @set-state with {text = ""}
            input.chat-input %
               ref(elem) =
                  if elem:
                     elem.focus()
               value = @state.text
               on-change(e) =
                  @set-state with {text = e.target.value}
               on-key-down(e) =
                  interactor.keydown(e)
               on-key-up(e) =
                  interactor.keyup(e)
