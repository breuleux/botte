
require:
   react-dom as ReactDOM
   moment
   .mixins ->
      MasterEvents
      ViewEvents
      ShardEvents
      ShardsetEvents
      PureRender
      DebouncedTasks
   ..utilities ->
      shorten
      SortedArray
      string-to-color
   .links ->
      expand-links
   ..renderers ->
      message-renderers
   ..format ->
      output-formatters
   ..master ->
      compare-messages

require-macros:
   earl-react ->
      %, component

provide:
   Message
   ShardsetComponent
   ShardComponent


MessageArray(messages) =
   s = SortedArray(compare-messages)
   s.populate(messages)

component Message:
   colorize-name(s) =
      span %
         style = {
            color = string-to-color(s, 100, 50)
            font-weight = .bold
         }
         s
   show-message(channel, agent, content, extra-class = "") =
      chname = shorten(channel)
      .message %
         class-name = extra-class
         on-click(e) =
            @props.view.select-message(@props.message, .click)
         .message-channel %
            style = {color = string-to-color(chname)}
            chname            
         .message-source % if{@props.active, @colorize-name(agent), agent}
         .message-content %
            match content:
               String? -> expand-links(content)
               else -> content
   status-message(channel, content) =
      chname = shorten(channel)
      .message %
         .message-channel %
            style = {color = string-to-color(chname)}
            chname            
         .message-source % ""
         .message-content % content
   render() =
      r = message-renderers[@props.message.type]
          \ or message-renderers._unhandled
      is-selected = @props.view.get-message-data(@props.message).selected
      contents =
         try:
            r.call(@, @props.message) or (span % "")
         catch e:
            .message.error %
               .message-channel % ""
               .message-source.error % "!RERROR!"
               .message-content %
                  div % e.message
                  div % JSON.stringify(
                     @props.message & {_pointers = undefined}
                     true
                     2
                  )
      .message-wrapper %
         class-name = if{is-selected, .selected, ""}
         contents
         if is-selected:
            then:
               ;; .message.message-toolbar %
               ;;    .message-channel % ""
               ;;    .message-source % @props.message.time
               ;;    .message-content %
               ;;       "Copy?"
               span % ""
            else:
               span % ""


component ShardsetComponent:
   mixins = {ViewEvents, ShardsetEvents, PureRender, DebouncedTasks}

   get-initial-state() =
      @at-bottom = true
      ff = @props.force-focus
      {
         shards = clone(@props.shardset.parts)
         visible = not ff or ff === @props.view.focus
         message-selected = false
      }

   update-scroll() =
      if @at-bottom:
         node = ReactDOM.findDOMNode(@)
         node.scrollTop = node.scrollHeight

   component-did-update() =
      @update-scroll()

   view-events() = {
      scroll-change() =
         @update-scroll()
      set-focus(_, channel) =
         ff = @props.force-focus
         @set-state with {visible = not ff or ff === channel}
      select-message(m) =
         @set-state with {message-selected = m !== null}
   }

   shardset-events() = {
      add-shard(shard, index) =
         ;; print 'Adding a shard at {index} for {@props.view.label}'
         shards = clone(@state.shards)
         shards.splice(index, 0, shard)
         @set-state with {shards = shards}
      delete-shard(shard, index) =
         throw E.not-implemented()
   }

   render() =
      ;; print {@state.visible
      ;;        @props.force-focus??.full-name
      ;;        @props.view.focus??.full-name}
      idx = Math.max(@state.shards.length - 10, 0)
      .messages %
         class-name = if{@state.visible, .visible, .invisible}
         on-scroll() =
            node = ReactDOM.findDOMNode(@)
            @at-bottom = (node.scrollTop + node.offsetHeight) >= node.scrollHeight
         @state.shards[idx ...] each shard ->
            ShardComponent %
               key = shard.id
               shard = shard
               view = @props.view
               master = @props.master
               force-focus = @props.force-focus
         if @state.message-selected:
            then: span % ""
            else: .selection-stop-gap % ""


component ShardComponent:
   mixins = {ShardEvents, ViewEvents, MasterEvents, DebouncedTasks}

   get-initial-state() = {
      focus = @props.view.focus??.full-name
      messages = MessageArray({}).populate(@props.shard.elements._arr)
   }
   
   execute-tasks(tasks) =
      var messages = @state.messages
      new-state = {=}
      tasks each
         #add{m} ->
            messages and new-state.messages = messages.add(m)
         #delete{m} ->
            messages and new-state.messages = messages.delete(m)
         #focus{name} ->
            if not @props.force-focus:
               new-state.focus = name
      if new-state != {=}:
         @set-state(new-state)

   component-did-update() =
      @props.view.emit(.scroll-change)

   master-events() = {
      unattached-message(m) =
         if @props.master.focus === @props.view
            \ and (not @props.shard.max or m.start-time < @props.shard.max)
            \ and (not @props.shard.min or m.start-time >= @props.shard.min):
            @do-task(#add{m})
   }

   view-events() = {
      set-focus(_, channel) =
         @do-task(#focus{channel??.full-name})
   }

   shard-events() = {
      add-element(m) =
         @do-task(#add{m})
      delete-element(m) =
         @do-task(#delete{m})
   }

   render() =
      ;; print 'render shard {@props.shard.id}'
      .shard %
         @state.messages each m ->
            active = m.channel === (@props.force-focus??.full-name or @state.focus)
            result =
               div %
                  key = m.message-id
                  className = if{active, "active-message", "inactive-message"}
                  Message %
                     active = active
                     message = m
                     view = @props.view
            result
