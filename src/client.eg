
require:
   fs
   earl-react as React
   react-dom as ReactDOM
   events -> EventEmitter
   electron -> ipc-renderer
   /browser -> document
   /dom
   .components/app ->
      ChatApp
   .source ->
      StreamSource
      StaticSource
   .master ->
      Dispatcher

require-macros:
   earl-react ->
      %, component

globals:
   window


stdin-buffer = new EventEmitter()
ipc-renderer.on(.data) with {event, data} ->
   stdin-buffer.emit(.data, data)
ipc-renderer.on(.end) with {event, data} ->
   stdin-buffer.emit(.end)
ipc-renderer.send(.ready)

setup(options) =
   src = match options:
      {=> messages} -> StaticSource(options.messages)
      {=> stream} -> StreamSource(stream.[in], stream.out)
   let master = Dispatcher(src)

   items(options.settings.client.groups) each
      {label, {=> channels, => always-show = false}} ->
         view = master.add-view(label, channels)
         view.always-show = always-show

   ReactDOM.render(a, options.mount) where a =
      ChatApp %
         master = master
   master.run()

main() where main() =
   mount-node = document.get-element-by-id("mount")
   setup with {
      mount = mount-node
      stream = {
         "in" = stdin-buffer
         out = {write(x) = ipc-renderer.send(.data, x)}
      }
      settings = JSON.parse with
         ;; fs.read-file-sync("debug.json", .utf8)
         fs.read-file-sync("botte.json", .utf8)
   }
   window.onkeydown(e) =
      global._botte_input??.focus()

